{
  "prefix": "org.apache.qpid.dispatch",
  "includes": {
    "entity-id": {
      "description":"Name and identity attributes common to all entity types",
      "attributes": {
        "name": {
          "type": "String",
          "required": true,
          "unique": true,
          "description": "Unique name, can be changed."
        },
        "identity": {
          "type": "String",
          "required": true,
          "unique": true,
          "description": "Unique identity, will not change."
        }
      }
    },
    "ssl-profile": {
      "description": "SSL profile to be referenced in listeners (for incoming connections) or connectors (for outgoing connectors).",
      "attributes": {
        "cert-db": {
          "type": "String",
          "description": "The path to the database that contains the public certificates of trusted certificate authorities (CAs). "
        },
        "cert-file": {
          "type": "String",
          "description": "The path to the file containing the PEM-formatted public certificate to be used on the local end of any connections using this profile. "
        },
        "key-file": {
          "type": "String",
          "description": "The path to the file containing the PEM-formatted private key for the above certificate. "
        },
        "password-file": {
          "type": "String",
          "description": "If the above private key is password protected, this is the path to a file containing the password that unlocks the certificate key. "
        },
        "password": {
          "type": "String",
          "description": "An alternative to storing the password in a file referenced by password-file is to supply the password right here in the configuration file.  This option can be used by supplying the password in the 'password' option.  Don't use both password and password-file in the same profile. "
        }
      }
    },
    "ip-addr": {
      "description": "IP address to be referenced in listeners (for incoming connections) or connectors (for outgoing connectors).",
      "attributes": {
        "addr": {
	  "description":"IP address: ipv4 or ipv6 literal or a host name",
          "type": "String",
          "default": "0.0.0.0"
        },
        "port": {
	  "description":"Port number or symbolic service name",
          "type": "String",
          "default": "amqp"
        }
      }
    },
    "connection": {
      "description": "Common connection attributes for listeners and connectors.",
      "attributes": {
        "sasl-mechanisms": {
          "type": "String",
          "required": true,
          "description": "Comma separated list of accepted SASL mechanisms."
        },
        "role": {
          "type": [
            "normal",
            "inter-router",
	    "on-demand"
          ],
          "default": "normal",
          "description": "The role of an established connection. In the normal role, the connection is assumed to be used for AMQP clients that are doing normal message delivery over the connection.  In the inter-router role, the connection is assumed to be to another router in the network.  Inter-router discovery and routing protocols can only be used over inter-router connections. "
        }
      }
    }
  },
  "entity_types": {
    "container": {
      "singleton": true,
      "include": [
        "entity-id"
      ],
      "attributes": {
        "worker-threads": {
          "type": "Integer",
          "default": "1",
          "description": "The number of threads that will be created to process message traffic and other application work (timers, non-amqp file descriptors, etc.) "
        }
      }
    },

    "router": {
      "singleton": true,
      "include": [
        "entity-id"
      ],
      "attributes": {
        "mode": {
          "type": [
            "standalone",
            "interior",
	    "edge"
          ],
          "default": "standalone",
          "description": "In standalone mode, the router operates as a single component.  It does not participate in the routing protocol and therefore will not coorperate with other routers. In interior mode, the router operates in cooreration with other interior routers in an interconnected network.  In edge mode, the router operates with an uplink into an interior router network. Edge routers are typically used as connection concentrators or as security firewalls for access into the interior network. "
        },
        "area": {
          "type": "String",
          "description": ""
        },
        "hello-interval": {
          "type": "Integer",
          "default": 1,
          "description": ""
        },
        "hello-max-age": {
          "type": "Integer",
          "default": 3,
          "description": ""
        },
        "ra-interval": {
          "type": "Integer",
          "default": 30,
          "description": ""
        },
        "remote-ls-max-age": {
          "type": "Integer",
          "default": 60,
          "description": ""
        },
        "mobile-addr-max-age": {
          "type": "Integer",
          "default": 60,
          "description": ""
        }
      }
    },

    "listener": {
      "include": [
        "entity-id",
        "ssl-profile",
        "ip-addr",
	"connection"
      ],
      "attributes": {
        "require-peer-auth": {
          "type": "Boolean",
          "default": true,
          "description": "Only for listeners using SSL.  If set to \"yes\", attached clients will be required to supply a certificate.  If the certificate is not traceable to a CA in the ssl profile's cert-db, authentication fails for the connection. "
        },
        "trusted-certs": {
          "type": "String",
          "description": "This optional setting can be used to reduce the set of available CAs for client authentication.  If used, this setting must provide a path to a PEM file that contains the trusted certificates. "
        },
        "allow-unsecured": {
          "type": "Boolean",
          "default": false,
          "description": "For listeners using SSL only.  If set to \"yes\", this option causes the listener to watch the initial network traffic to determine if the client is using SSL or is running in-the-clear.  The listener will enable SSL only if the client uis using SSL. "
        },
        "max-frame-size": {
          "type": "Integer",
          "default": 65536,
          "description": "Defaults to 65536.  If specified, it is the maximum-frame-size in octets that will be used in the connection-open negotiation with a connected peer.  The frame size is the largest contiguous set of uniterruptible data that can be sent for a message delivery over the connection. Interleaving of messages on different links is done at frame granularity. "
        }
      }
    },
    "connector": {
      "include": [
        "entity-id",
        "ssl-profile",
        "ip-addr",
	"connection"
      ],
      "attributes": {
        "allow-redirect": {
          "type": "Boolean",
          "default": true,
          "description": ""
        },
        "max-frame-size": {
          "type": "Integer",
          "default": 65536,
          "description": "Maximum frame size in octets that will be used in the connection-open negotiation with a connected peer.  The frame size is the largest contiguous set of uniterruptible data that can be sent for a message delivery over the connection. Interleaving of messages on different links is done at frame granularity. "
        }
      }
    },

    "logging": {
      "include": [
        "entity-id"
      ],
      "attributes": {
	"module": {
	  "type":[
	    "router",
	    "message",
	    "server",
	    "agent",
	    "container",
	    "config",
	    "default"
	  ],
	  "description": "Module to configure logging level. The special module 'default' specifies logging for modules that don't have explicit log sections."
	},
        "level": {
          "type": [
            "none",
            "trace",
            "debug",
            "info",
            "notice",
            "warning",
            "error",
            "critical"
          ],
          "default": "info",
          "description": "Indicates the minimum logging level for the module. E.g. WARNING means log WARNING, ERROR and CRITICAL messages. TRACE logs all messages. NONE disables logging for the module. "
        },
        "timestamp": {
          "type": "Boolean",
	  "default": true,
          "description": "Set a timestamp on log messages"
        },
        "output": {
          "type": "String",
          "description": "Where to send log messages. Can be 'stderr', 'syslog' or a file name. "
        }
      }
    },

    "fixed-address": {
      "include": [
        "entity-id"
      ],
      "attributes": {
        "prefix": {
          "type": "String",
          "required": true,
          "description": "The address prefix (always starting with \"/\"). "
        },
        "phase": {
          "type": "Integer",
          "description": ""
        },
        "fanout": {
          "type": [
            "multiple",
            "single"
          ],
          "default": "multiple",
          "description": "One of \"multiple\" or \"single\".  Multiple fanout is a non-competing pattern.  If there are multiple consumers using the same address, each consumer will receive its own copy of every message sent to the address.  Single fanout is a competing pattern where each message is sent to only one consumer. "
        },
        "bias": {
          "type": [
            "closest",
            "spread"
          ],
          "default": "closest",
          "description": "Only if fanout is single.  One of \"closest\" or \"spread\".  Closest bias means that messages to an address will always be delivered to the closest (lowest cost) subscribed consumer. Spread bias will distribute the messages across subscribers in an approximately even manner. "
        }
      }
    },

    "waypoint": {
      "include": [
        "entity-id"
      ],
      "attributes": {
        "in-phase": {
          "type": "Integer",
          "default": -1
        },
        "out-phase": {
          "type": "Integer",
          "default": -1
        },
        "connector": {
          "type": "String",
          "required": true
        }
      }
    }
  }
}
