<!--*-markdown-*-

Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
nspecific language governing permissions and limitations
under the License.

-->

# How man pages are generated.

Man pages are generated by combining markdown sources and the `--help` option of
command line tools.

The `--help` option should give a *very brief* usage message and list of
options.  Man pages should give much more detailed information about use, but we
do not want to duplicate the `--help` information as it will easily become out
of date.

The markdown source file for the man page is called something like `foo.1.noopt.md.in`. This gets
transformed as follows:

- Substitute cmake variables of the form `${X}`. (`foo.1.noopt.md`)
- Replace the *Options* section with the output of `program --help`. (`foo.1.md`)
- Convert to nroff-format man page by pandoc. (`foo.1`)

# Rules for markdown map pages

Use markdown top-level headings `# Heading` with the standard man page section
names: *Name*, *Synopsis*, *Description*, *Options*, *Files*, *See also*

Use markdown sub-headings`## Sub Heading` for sub-sections

Include an *Options* section like this (it will be replaced with the real options from `--help`):

    # Options

    Run `qdmanage --help` to see options.

Use the pandoc definition list markdown extension for named items. Here's an example:

    `create` [*ATTR=VALUE*...]
    :   Create a new entity with the specified attributes.
        With the --stdin option, read attributes from stdin. This can be a JSON
        map of attributes to create a single entity, or a JSON list of maps to create multiple entitiees.

    `read`
    :   Print the attributes of an entity specified by the --name or --identity options.
        With the --stdin option, create entities based on data from stdin. This can be a JSON
        map of attributes to create a single entity, or a JSON list of maps to create multiple entitiees.

Most other markdown markup will do what you expect, e.g. *emphasis*, **strong**, `code` etc.
